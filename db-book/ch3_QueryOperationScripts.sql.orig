/* Departement ralation */
select * from department;

/* Classroom */
select * from classroom;

/* instructor relation */
select * from instructor;

/* teaches relation */
select * from teaches;

/* courses */
select * from course;

/* section relation */
select * from section;


/* prereq */
select * from prereq;

/* basic Query operation */

/* find the names of all instructors */
select instructor.name, instructor.dept_name
from instructor
;

/* frind department name of all instructors */
select instructor.dept_name
from instructor
;

/* the above query is equivalent to 
select all dept_name 
from instructor
;

*/
/* discard repeated dept-names */
select distinct dept_name
from instructor
;

/* simple operation in queries */
select ID, name, dept_name, salary*1.1 as 'new salary'
from instructor
;

/* find the names of instructos, in the computer science 
department, with salary more than 70000 */
select name
from instructor
where dept_name = "Comp.Sci." and salary > 70000
;

/*
* 3.3.2 Queries on multiple relations 
**************************************/

/*Retrieve the names of all instructors along with their 
department names and buildings 
*/
select instructor.name, instructor.dept_name, department.building
from instructor, department
where instructor.dept_name = department.dept_name
;

/* cartesian product of instructor relation and teachs relation */
select instructor.ID, name, instructor.dept_name, instructor.salary,
	   teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year
from instructor, teaches
; 

/* a more meaningfull query */
/* this is an 'outer join ' operation */
select name, course_id
from instructor, teaches
where instructor.ID = teaches.ID
; 

/* cinstructor names and course ids in the Computer sci department */
select name, course_id
from instructor, teaches
where instructor.ID = teaches.ID and instructor.dept_name = "Comp.Sci."
;

/*
* 3.3.3 The natural join 
**************************************/
select name, course_id 
from instructor, teaches
where instructor.ID = teaches.ID
;

/* using the natural join */
select name, course_id
from instructor natural join teaches
;

/* getting all the information about teachers who gives somes
courses */
select*
from instructor natural join teaches
;

/* List names of instructors along with titles of 
corses thet teach */
select name, title
from instructor natural join teaches, course
where teaches.course_id = course.course_id
;

/*compare with this query */
/* this query will give the same results as the previous one
while omitting the all (instructor name, course title) where 
the instructor teaches a course in a department other than 
his own department*/
select name, title
from instructor natural join teaches natural join course
;

/*using joins while specifying exactly the columns that 
should be equated */
select name, title
from (instructor natural join teaches) join course using(course_id)
;

/*
* 3.4.1 the rename operation : p74
****************************/
select name as instructor_name, course_id
from instructor, teaches 
where instructor.ID = teaches.ID
;
/* T and S are called correlation names 
or table alias, correlation variable, tuple variable */
select T.name, S.course_id
from instructor as T, teaches as S
where T.ID = S.ID
;

/* find all instructors whose salary is greater than 
at least one instructor in the biology department */
select distinct T.name, T.salary
from instructor as T, instructor as S
where T.salary > S.salary and S.dept_name = 'Biology'
;

/*
* 3.4.2 String operations : p76
*******************************/

/* pattern matching 
escape character can be specified using the escape keyword 
'ab\%cd%' escape '\' matches any string beginning with ab%cd
*/
select dept_name 
from department
where building like '%Watson%'
;

/*
* 3.4.4 ordering the display of tuples 
*/

/* list in alphabetical order instructors 
of the physics department */
select name
from instructor
where instructor.dept_name = 'Physics'
order by name desc
;

/* list entire instructor relation in descending order 
of salary. if several instructors have the same salary,
order them in ascending order by name */
select*
from instructor
order by salary desc, name asc
;

/*
* 3.4.5 where clause predicates
*/

/* instructors with salaries between 90000 10000 included */
select name, salary
from instructor
where salary between 90000 and 100000
;

select name, course_id
from instructor, teaches
where instructor.ID = teaches.ID and instructor.dept_name = 'Biology'
;

/* which is equivalent to */
select name, course_id 
from instructor, teaches
where (instructor.ID, dept_name) = (teaches.ID, 'Biology')
;


/*
* 3.5 Set Operations
********************/
/* the set of all courses taught an fall 2009 */
select course_id as c1
from section
where semester = 'Fall' and year = 2009
;

/* the set of all courses taght in spring 2010 */
select course_id as c2
from section 
where semester = 'Spring' and year = 2010
;

/*
* 3.5.1 Union operation 
***********************/
/* the union operation: this illiminates duplicates */
(select course_id 
from section
where semester = 'Fall' and year = 2009)
union
(select course_id as c2
from section 
where semester = 'Spring' and year = 2010)
;

/* to keep duplicates */

(select course_id 
from section
where semester = 'Fall' and year = 2009)
union all
(select course_id as c2
from section 
where semester = 'Spring' and year = 2010)
;

/*
* 3.5.2 the intersect operation
*******************************/
/* not available in MySQL*/
select distinct T.course_id
from section as T, section as S
where T.semester = 'Fall' and T.year = 2009
  and S.semester = 'Spring' and S.year = 2010 
  and T.course_id = S.course_id
;

/*
* 3.5.3 the except operation
*******************************/
select course_id
from section 
where semester = 'fall' and year = 2009 
and course_id not in 
(select course_id
from section
where semester = 'Spring' and year = 2010)
;
/*
* 3.6 Null Values 
*****************/

/*
* 3.7 Aggregate functions 
*************************/

/* find the average salary of instructors in the
Computer science department */
select avg(salary) as avg_salary
from instructor
where dept_name = 'Comp.Sci.'
;

/* find the total number of instructors who teach in 
a course in the spring 2010 semester */
select count(distinct ID)
from teaches
where semester = 'Spring' and year = 2010
;
/* counting tuples in a relation */
select count(*)
from course
;

/*
* 3.7.2 Aggregation with grouping 
*********************************/

/* find the average salary in each department */
select dept_name, avg(salary) as avg_salary
from instructor
group by dept_name
;

/* find the numbers of instructors in each department who teach
a course in the spring 2010 semester */
select dept_name, count(distinct ID)
from instructor natural join teaches
where semester = 'Spring' and year = 2010
group by dept_name
;
/* equivalent to */
select dept_name, Count(distinct instructor.ID) as instr_count
from instructor, teaches
where instructor.ID = teaches.ID
  and teaches.semester = 'Spring' 
  and teaches.year = 2010
group by dept_name
;

/*
* 3.7.3 the Having clause
*************************/
/* list department with average salaries more than 42000*/
select dept_name, avg(salary) as avg_salary
from instructor
group by dept_name 
having avg(salary) > 42000
order by avg_salary asc
;

/* For each course section offered in 2009, find the average
total credits of all students enrolled in the section, if 
the section had at least 2 students */
select course_id, sec_id, semester, year, avg(tot_credit)
from takes natural join student
where year = 2009
group by course_id, sec_id, semester, year
having count(student.ID) >= 2
;

/*
* 3.7.4 Aggregation with null and boolean values 
************************************************/


/*
* 3.8 Nested Subqueries 
***********************/
/*
* 3.8.1 Set membership 
*********************/
/* find all the courses taught in fall 2009
and spring 2010 */
SELECT 
    course_id
FROM
    section
WHERE
    semester = 'Spring' AND year = 2010
        AND course_id IN (SELECT 
            course_id
        FROM
            section
        WHERE
            semester = 'Fall' AND year = 2009)
;

/* find all the courses taught in fall 2009
but not spring 2010 */
SELECT 
    course_id
FROM
    section
WHERE
    semester = 'Fall' AND year = 2009
        AND course_id not IN (SELECT 
            course_id
        FROM
            section
        WHERE
            semester = 'Spring' AND year = 2010)
;

/* select instructor whose names are neither 
Mozart nor Eistein */
select distinct name
from instructor 
where name not in ('Mozart','Einstein')
;

/* find the total number of (distinct) students who 
have taken course sections taught by instructor with 
ID 101011 */
select count(distinct ID)
from takes 
where (course_id, sec_id, semester, year) in (select
       course_id, sec_id, semester, year
       from teaches 
       where teaches.ID = '10101')
;

/*
* 3.8.2 Set comparaison 
***********************/
/* Find the names of all instructors whose salary is greater than at least one
instructor in the Biology department */
select distinct T.name
from instructor as T, instructor as S
where T.salary > S.salary and S.dept_name = 'Biology'
;

/* using the some */
select name, salary
from instructor
where salary > some(select salary
					from instructor
                    where dept_name = 'Biology'
                    )
;

select name, salary
from instructor 
where salary <> all (select salary   -- equivalent to not in 
					from instructor
                    where dept_name = 'Biology'
                    )
;

/* find the department that have the highest average salary */

select dept_name
from instructor
group by dept_name
having avg(salary) >= all(select avg(salary)
from instructor
group by dept_name
)
;

/*
* 3.8.3 Test for empty relation
*******************************/
/* find the courses taught in fall 2009 and spring 2010 */
select course_id 
from section as S
where semester = 'Fall' and year = 2009 and 
	  exists (select *
      from section as T
      where semester = 'Spring' and year = 2010 and S.course_id = T.course_id      
      )
;

/* find all students who have taken all courses offered 
in the biology department */
select distinct S.ID, S.name
from student as S
where not exists((	select course_id 
					from course 
					where dept_name = 'History'
					not in (select T.course_id
							from takes as T
							where S.ID = T.id))
)
;

select S.ID, S.name
from student as S
where not exists(
(select course_id -- all the courses offered in the biology dept
from course 
where dept_name = 'Biology' not in
(select T.course_id
from takes as T 
where S.ID = T.ID)
));

/*
* 3.8.4 Test for the Duplicate tuples 
*************************************/
/* found all courses that were offered at most once in 2009 */
select C.course_id, C.title
from course as C, section as S
where S.year = 2009 and C.course_id = S.course_id 
group by course_id
having count(C.course_id) >= 1
;

/* equivalent */

select T.course_id, T.title
from course as T
where 1 <= (select count(R.course_id)
            from section as R
            where T.course_id = R.course_id and R.year = 2009
            )
;

/*
<<<<<<< HEAD
* 3.8.5 Subqueries in the form of clause 
=======
* 3.8.5 Subqueries in the form clause 
>>>>>>> bb8db0543949e5857bdfc0257accc703b0645b85
****************************************/
/* Find the average instructors’ salaries of those departments
where the average salary is greater than $42,000 */
select dept_name, avg_salary
from(select dept_name, avg(salary) as avg_salary
	 from instructor 
     group by dept_name
    ) as averages
    where avg_salary > 65000
;

/* equivalent to */
select dept_name, avg(salary) as Sal
from instructor
group by dept_name
having sal > 65000
;

/* find the maximum across all departments
of the total salary at each department */

select max(tot)
from(select dept_name, sum(salary) as tot
	 from instructor
     group by dept_name
) as dept_total
;

















































